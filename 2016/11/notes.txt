> As I was completing Day 11, I took a lot of notes. Rather than throw all
> of these away, I'm saving these here into one large file. Who knows
> what they mean exactly, but this kind of shows some of my thought process.

    The first floor contains a silver generator and a silver-compatible microchip.
    The second floor contains a cobalt generator, a hydrogren generator, a ruthenium generator, and a plutonium generator.
    The third floor contains a cobalt-compatible microchip, a hydrogren-compatible microchip, a ruthenium-compatible microchip, and a plutonium-compatible microchip.
    The fourth floor contains nothing relevant.

0 -
F4 .  .  .  .  .  
F3 .  .  .  LG .  
F2 .  .  .  .  .  
F1 E  SG SM .  .  .  .  .  .

 0 - 0; |1,1| |0,4| |4,0| |0,0|
 1 - 1; |0,0| |1,5| |4,0| |0,0|
 2 - 2; |0,0| |0,5| |5,0| |0,0|
 3 - 3; |0,0| |0,5| |3,0| |2,0|
 4 - 2; |0,0| |0,5| |4,0| |1,0|
 5 - 3; |0,0| |0,5| |2,0| |3,0|
 6 - 2; |0,0| |0,5| |3,0| |2,0|
 7 - 1; |0,0| |1,5| |2,0| |2,0|
 8 - 2; |0,0| |1,3| |2,2| |2,0|
 9 - 1; |0,0| |2,3| |1,2| |2,0|
10 - 2; |0,0| |1,2| |2,3| |2,0|
11 - 1; |0,0| |2,2| |1,3| |2,0|
12 - 2; |0,0| |1,1| |2,4| |2,0|
13 - 1; |0,0| |1,2| |2,3| |2,0|
14 - 2; |0,0| |1,0| |2,5| |2,0|
15 - 3; |0,0| |1,0| |2,3| |2,2|
16 - 2; |0,0| |1,0| |3,3| |1,2|
17 - 3; |0,0| |1,0| |2,2| |2,3|
18 - 2; |0,0| |1,0| |2,3| |2,2|
19 - 3; |0,0| |1,0| |1,2| |3,3|
20 - 2; |0,0| |1,0| |2,2| |2,3|
21 - 3; |0,0| |1,0| |1,1| |3,4|
22 - 2; |0,0| |1,0| |1,2| |3,3|
23 - 3; |0,0| |1,0| |0,1| |4,4|
24 - 2; |0,0| |1,0| |1,1| |3,4|
25 - 3; |0,0| |1,0| |0,0| |4,5|
26 - 2; |0,0| |1,0| |1,0| |3,5|
27 - 1; |0,0| |2,0| |0,0| |3,5|
28 - 2; |0,0| |0,0| |2,0| |3,5|
29 - 3; |0,0| |0,0| |0,0| |5,5|


--------------------------------------------------------------------------------


0; 2,0; 0,1; 0,1; 0,0
1; 1,0; 1,1; 0,1; 0,0
2; 1,0; 0,0; 1,2; 0,0
1; 1,0; 1,0; 0,2; 0,0
0; 2,0; 0,0; 0,2; 0,0
1; 0,0; 2,0; 0,2; 0,0
2; 0,0; 0,0; 2,2; 0,0
3; 0,0; 0,0; 0,2; 2,0
2; 0,0; 0,0; 1,2; 1,0
3; 0,0; 0,0; 1,0; 1,2
2; 0,0; 0,0; 2,0; 0,2
3; 0,0; 0,0; 0,0; 2,2

12 states, **11** moves (initial state doesn't count as a move)


10 branches from each state:
1 chip, 1 gen, 2 chips, 2 gens, 1 chip and 1 gen * 2 directions (up or down)

1st move:
1 chip up - 1; 1,0; 1,1; 0,1; 0,0
2 chip up - 1; 0,0; 2,1; 0,1; 0,0 # Invalid state (2 > 1)

So, set of possible moves is [1; 1,0; 1,1; 0,1; 0,0]
Create a node for each move, and connect from [0; 2,0; 0,1; 0,1; 0,0] to each node
Add each node to our visited table

Visted = {
    0; 2,0; 0,1; 0,1; 0,0 # connectedTo [1; 1,0; 1,1; 0,1; 0,0]
    1; 1,0; 1,1; 0,1; 0,0
};

2nd move:
Loop through previous queue (just one item) and build possibilities from there

1 chip up - 2; 1,0; 0,1; 1,1; 0,0
1 chip dn - 0; 2,0; 0,1; 0,1; 0,0 # Pruned, already seen
1  gen up - 2; 1,0; 1,0; 0,2; 0,0
1  gen dn - 0; 1,1; 1,0; 0,1; 0,0
2  c+g up - 2; 1,0; 0,0; 1,2; 0,0
2  c+g dn - 0; 2,1; 0,0; 0,1; 0,0 # Invalid

Create four new nodes, and connect [1; 1,0; 1,1; 0,1; 0,0] to all of them
Add each node to our visited table
Visted = {
    A - 0; 2,0; 0,1; 0,1; 0,0 # connectedTo [B]
    B - 1; 1,0; 1,1; 0,1; 0,0 # connectedTo [C, D, E, F, G]
    C - 2; 1,0; 0,1; 1,1; 0,0
    D - 2; 1,0; 1,0; 0,2; 0,0
    E - 0; 1,1; 1,0; 0,1; 0,0
    F - 2; 1,0; 0,0; 1,2; 0,0
    G - 0; 2,1; 0,0; 0,1; 0,0
};

3rd move:
Loop through [C, D, E, F, G] and build possibilities from there

C (2; 1,0; 0,1; 1,1; 0,0):
1 chip up - H - 3; 1,0; 0,1; 0,1; 1,0
1 chip dn - _ - 1; 1,0; 1,1; 0,1; 0,0 # Pruned, seen before
1  gen up - I - 3; 1,0; 0,1; 1,0; 0,1
1  gen dn - J - 1; 1,0; 0,2; 1,0; 0,0
2  c+g up - K - 3; 1,0; 0,1; 0,0; 1,1
2  c+g dn - L - 1; 1,0; 1,2; 0,0; 0,0

Creating 5 new nodes (H, I, J, K, L) and connect from C
Add to queue [D, E, F, H, I, J, K, L]
and add to visited

Visted = {
    A - 0; 2,0; 0,1; 0,1; 0,0 # connectedTo [B]
    B - 1; 1,0; 1,1; 0,1; 0,0 # connectedTo [C, D, E, F]
    C - 2; 1,0; 0,1; 1,1; 0,0 # connectedTo [H, I, J, K, L]
    D - 2; 1,0; 1,0; 0,2; 0,0
    E - 0; 1,1; 1,0; 0,1; 0,0
    F - 2; 1,0; 0,0; 1,2; 0,0
    G - 0; 2,1; 0,0; 0,1; 0,0
    H - 3; 1,0; 0,1; 0,1; 1,0
    I - 3; 1,0; 0,1; 1,0; 0,1
    J - 1; 1,0; 0,2; 1,0; 0,0
    K - 3; 1,0; 0,1; 0,0; 1,1
    L - 1; 1,0; 1,2; 0,0; 0,0
};

D (2; 1,0; 1,0; 0,2; 0,0):

1  gen up - M - 3; 1,0; 1,0; 0,1; 0,1
1  gen dn - _ - 1; 1,0; 1,1; 0,1; 0,0 # Seen (B)
2  gen up - N - 3; 1,0; 1,0; 0,0; 0,2
2  gen dn - _ - 1; 1,0; 1,2; 0,0; 0,0 # Seen (L)

Create 2 new nodes (M, N) and connect from D
Add to queue [E, F, H, I, J, K, L, M, N]
and add to visited

Visted = {
    A - 0; 2,0; 0,1; 0,1; 0,0 # connectedTo [B]
    B - 1; 1,0; 1,1; 0,1; 0,0 # connectedTo [C, D, E, F]
    C - 2; 1,0; 0,1; 1,1; 0,0 # connectedTo [H, I, J, K, L]
    D - 2; 1,0; 1,0; 0,2; 0,0 # connectedTo [M, N]
    E - 0; 1,1; 1,0; 0,1; 0,0
    F - 2; 1,0; 0,0; 1,2; 0,0
    G - 0; 2,1; 0,0; 0,1; 0,0
    H - 3; 1,0; 0,1; 0,1; 1,0
    I - 3; 1,0; 0,1; 1,0; 0,1
    J - 1; 1,0; 0,2; 1,0; 0,0
    K - 3; 1,0; 0,1; 0,0; 1,1
    L - 1; 1,0; 1,2; 0,0; 0,0
    M - 3; 1,0; 1,0; 0,1; 0,1
    N - 3; 1,0; 1,0; 0,0; 0,2
};

E (0; 1,1; 1,0; 0,1; 0,0):
1 chip up - O - 1; 0,1; 2,0; 0,1; 0,0
1  gen up - _ - 1; 1,0; 1,1; 0,1; 0,0 # Seen (B)
2  c+g up - _ - 1; 0,0; 2,1; 0,1; 0,0 # Invalid, more chips than gens

Create 1 new node (O) and connect from E
Add to queue [F, G, H, I, J, K, L, M, N, O]
and add to visited

Visted = {
    A - 0; 2,0; 0,1; 0,1; 0,0 # connectedTo [B]
    B - 1; 1,0; 1,1; 0,1; 0,0 # connectedTo [C, D, E, F]
    C - 2; 1,0; 0,1; 1,1; 0,0 # connectedTo [H, I, J, K, L]
    D - 2; 1,0; 1,0; 0,2; 0,0 # connectedTo [M, N]
    E - 0; 1,1; 1,0; 0,1; 0,0 # connectedTo [O]
    F - 2; 1,0; 0,0; 1,2; 0,0
    G - 0; 2,1; 0,0; 0,1; 0,0
    H - 3; 1,0; 0,1; 0,1; 1,0
    I - 3; 1,0; 0,1; 1,0; 0,1
    J - 1; 1,0; 0,2; 1,0; 0,0
    K - 3; 1,0; 0,1; 0,0; 1,1
    L - 1; 1,0; 1,2; 0,0; 0,0
    M - 3; 1,0; 1,0; 0,1; 0,1
    N - 3; 1,0; 1,0; 0,0; 0,2
    O - 1; 0,1; 2,0; 0,1; 0,0
};

F (2; 1,0; 0,0; 1,2; 0,0):

1 chip up - P - 3; 1,0; 0,0; 0,2; 1,0
1 chip dn - Q - 1; 1,0; 1,0; 0,2; 0,0 # Have seen the state, but elevator was at different floor. So elevator position does matter?
1  gen up - R - 3; 1,0; 0,0; 1,1; 0,1
1  gen dn - S - 1; 1,0; 0,1; 1,1; 0,0
2  gen up - T - 3; 1,0; 0,0; 1,0; 0,2
2  gen dn - _ - 1; 1,0; 0,2; 1,0; 0,0 # Seen (J)
2  c+g up - U - 3; 1,0; 0,0; 0,1; 1,1
2  c+g dn - _ - 1; 1,0; 1,1; 0,1; 0,0 # Seen (B)

Create 6 new nodes (P, Q, R, S, T, U) and connect from E
Add to queue [H, I, J, K, L, M, N, O]
and add to visited


--------------------------------------------------------------------------------


# Somehow incorrect
  0 - 0;2,0,0,1,0,1,0,0
  1 - 1;1,0,1,1,0,1,0,0
  2 - 2;1,0,0,0,1,2,0,0
  3 - 3;1,0,0,0,0,1,1,1
  4 - 2;1,0,0,0,0,2,1,0
  5 - 1;1,0,0,1,0,1,1,0
  6 - 0;1,1,0,0,0,1,1,0
  7 - 1;0,0,1,1,0,1,1,0
  8 - 2;0,0,0,0,1,2,1,0

0 -
F4 .  .  .  .  .  
F3 .  .  .  LG .  
F2 .  HG .  .  .  
F1 E  .  HM .  LM 

1 -
F4 .  .  .  .  .  
F3 .  .  .  LG .  
F2 E  HG HM .  .  
F1 .  .  .  .  LM 

2 -
F4 .  .  .  .  .  
F3 E  HG HM LG .  
F2 .  .  .  .  .  
F1 .  .  .  .  LM 

3 -
F4 E  HG HM .  .  
F3 .  .  .  LG .  
F2 .  .  .  .  .  
F1 .  .  .  .  LM 

4 -
F4 .  .  HM .  .  
F3 E  HG .  LG .  
F2 .  .  .  .  .  
F1 .  .  .  .  LM 

5 -
F4 .  .  HM .  .  
F3 .  HG .  .  .  
F2 E  .  .  LG .  
F1 .  .  .  .  LM 

6 -
F4 .  .  HM .  .  
F3 .  HG .  .  .  
F2 .  .  .  .  .  
F1 E  .  .  LG LM 

7 -
F4 .  .  HM .  .  
F3 .  HG .  .  .  
F2 E  .  .  LG LM 
F1 .  .  .  .  .

8 -
F4 .  .  HM .  .  
F3 E  HG .  LG LM 
F2 .  .  .  .  .
F1 .  .  .  .  .

9 -
F4 E  HG HM LG .  
F3 .  .  .  .  LM 
F2 .  .  .  .  .
F1 .  .  .  .  .

10 -
F4 .  HG .  LG .  
F3 E  .  HM .  LM 
F2 .  .  .  .  .
F1 .  .  .  .  .

11 -
F4 E  HG HM LG LM  
F3 .  .  .  .  . 
F2 .  .  .  .  .
F1 .  .  .  .  .


--------------------------------------------------------------------------------


# Correct
0 - 0;2,0,0,1,0,1,0,0
1 - 1;1,0,1,1,0,1,0,0
2 - 2;1,0,0,0,1,2,0,0
3 - 1;1,0,1,0,0,2,0,0
4 - 0;2,0,0,0,0,2,0,0
5 - 1;0,0,2,0,0,2,0,0
6 - 2;0,0,0,0,2,2,0,0
7 - 3;0,0,0,0,0,2,2,0
8 - 2;0,0,0,0,1,2,1,0

# Somehow incorrect
  0 - 0; 2,0, 0,1, 0,1, 0,0
  1 - 1; 1,0, 1,1, 0,1, 0,0
  2 - 2; 1,0, 0,0, 1,2, 0,0
  3 - 3; 1,0, 0,0, 0,1, 1,1
  4 - 2; 1,0, 0,0, 0,2, 1,0
  5 - 1; 1,0, 0,1, 0,1, 1,0
  6 - 0; 1,1, 0,0, 0,1, 1,0
  7 - 1; 0,0, 1,1, 0,1, 1,0
  8 - 2; 0,0, 0,0, 1,2, 1,0


